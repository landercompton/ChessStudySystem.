@{
    ViewData["Title"] = "Chess Study";
    var game = ViewBag.Game as ChessStudySystem.Web.Models.Lichess.LichessGame;
}

<!-- Chess.js with correct CDN and integrity hash -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js" integrity="sha512-xRllwz2gdZciIB+AkEbeq+gVhX8VB8XsfqeFbUh+SzHlN96dEduwtTuVuc2u9EROlmW9+yhRlxjif66ORpsgVA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<!-- Load chess-study.js as a module -->
<script type="module" src="~/js/chess-study.js"></script>

<!-- SINGLE set of Chessground CSS with CORRECT paths -->
<link rel="stylesheet" href="~/css/chessground/chessground.base.css" />
<link rel="stylesheet" href="~/css/chessground/chessground.brown.css" />
<link rel="stylesheet" href="~/css/chessground/chessground.cburnett.css" />

<!-- Game data from server -->
<script>
    const gameData = @Html.Raw(game != null ? 
        System.Text.Json.JsonSerializer.Serialize(new {
            lichessId = game.LichessId,
            pgn = game.Pgn,
            moves = game.Moves,
            white = game.WhiteUsername,
            black = game.BlackUsername,
            result = game.Winner,
            opening = game.OpeningName,
            eco = game.OpeningEco,
            timeControl = game.TimeControl,
            createdAt = game.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")
        }) : "null");
</script>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2><i class="fas fa-chess"></i> Chess Study</h2>
            @if (game != null)
            {
                <div class="d-flex flex-wrap gap-3 mb-3">
                    <span class="badge bg-primary">@game.WhiteUsername vs @game.BlackUsername</span>
                    @if (!string.IsNullOrEmpty(game.OpeningName))
                    {
                        <span class="badge bg-info text-dark">@game.OpeningEco: @game.OpeningName</span>
                    }
                    <span class="badge bg-secondary">@game.TimeControl</span>
                    <span class="badge bg-light text-dark">@game.CreatedAt.ToString("MMM dd, yyyy")</span>
                    <a href="https://lichess.org/@game.LichessId" target="_blank" class="badge bg-success text-decoration-none">
                        View on Lichess <i class="fas fa-external-link-alt"></i>
                    </a>
                </div>
            }
            else
            {
                <p class="text-muted">Analyze chess positions with Lichess engine</p>
            }
        </div>
    </div>

    <div class="row">
        <!-- Chessboard Column -->
        <div class="col-lg-8">
            <div class="card">
                <div class="card-body">
                    <div id="chessboard" style="width: 100%; max-width: 600px; margin: 0 auto;"></div>
                </div>
            </div>
        </div>

        <!-- Analysis Panel -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-brain"></i> Engine Analysis</h5>
                </div>
                <div class="card-body">
                    <!-- Analysis Controls -->
                    <div class="mb-3">
                        <button id="analyzeBtn" class="btn btn-primary w-100">
                            <i class="fas fa-search"></i> Analyze Position
                        </button>
                    </div>

                    <!-- Game Controls (if game is loaded) -->
                    @if (game != null)
                    {
                        <div class="mb-3">
                            <div class="btn-group w-100" role="group">
                                <button id="prevMoveBtn" class="btn btn-outline-secondary">
                                    <i class="fas fa-step-backward"></i>
                                </button>
                                <button id="nextMoveBtn" class="btn btn-outline-secondary">
                                    <i class="fas fa-step-forward"></i>
                                </button>
                                <button id="resetBtn" class="btn btn-outline-warning">
                                    <i class="fas fa-home"></i>
                                </button>
                            </div>
                        </div>
                    }

                    <!-- Evaluation Display -->
                    <div class="mb-3">
                        <div class="card">
                            <div class="card-body p-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">Evaluation:</small>
                                    <span id="evaluation" class="fw-bold">+0.00</span>
                                </div>
                                <div class="progress mt-2" style="height: 10px;">
                                    <div id="evalBar" class="progress-bar bg-success" style="width: 50%"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Best Move -->
                    <div class="mb-3">
                        <div class="card">
                            <div class="card-body p-2">
                                <small class="text-muted">Best Move:</small>
                                <div id="bestMove" class="fw-bold text-primary">-</div>
                            </div>
                        </div>
                    </div>

                    <!-- Move List (if game is loaded) -->
                    @if (game != null)
                    {
                        <div class="card">
                            <div class="card-header py-2">
                                <small class="fw-bold">Game Moves</small>
                            </div>
                            <div class="card-body p-2" style="max-height: 300px; overflow-y: auto;">
                                <div id="moveList" class="small"></div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Include your existing chess study JavaScript -->
<script src="~/js/chess-study.js"></script>

<!-- Game loading functionality -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Load game if provided
    if (gameData) {
        console.log('Loading game:', gameData);
        
        // If you have PGN, load it
        if (gameData.pgn) {
            loadPgnIntoBoard(gameData.pgn);
        }
        // If you have moves string, parse and load it
        else if (gameData.moves) {
            loadMovesIntoBoard(gameData.moves);
        }
        
        // Display game info
        updateGameInfo(gameData);
    }
});

function loadPgnIntoBoard(pgn) {
    try {
        // Load PGN into your chess.js instance and board
        // This depends on your existing chess-study.js implementation
        if (typeof chess !== 'undefined') {
            chess.load_pgn(pgn);
            // Update board to current position
            if (typeof board !== 'undefined') {
                board.position(chess.fen());
            }
        }
    } catch (error) {
        console.error('Error loading PGN:', error);
    }
}

function loadMovesIntoBoard(movesString) {
    try {
        // Parse moves and apply them
        // This depends on your moves format (UCI, SAN, etc.)
        const moves = movesString.split(' ');
        if (typeof chess !== 'undefined') {
            chess.reset();
            moves.forEach(move => {
                if (move.trim()) {
                    try {
                        chess.move(move);
                    } catch (e) {
                        console.warn('Invalid move:', move);
                    }
                }
            });
            if (typeof board !== 'undefined') {
                board.position(chess.fen());
            }
        }
    } catch (error) {
        console.error('Error loading moves:', error);
    }
}

function updateGameInfo(game) {
    // Update any game-specific UI elements
    document.title = `Chess Study - ${game.white} vs ${game.black}`;
    
    // Update move list if it exists
    updateMoveList();
}

function updateMoveList() {
    const moveListElement = document.getElementById('moveList');
    if (moveListElement && typeof chess !== 'undefined') {
        const history = chess.history();
        let moveHtml = '';
        
        for (let i = 0; i < history.length; i += 2) {
            const moveNumber = Math.floor(i / 2) + 1;
            const whiteMove = history[i];
            const blackMove = history[i + 1] || '';
            
            moveHtml += `
                <div class="d-flex justify-content-between mb-1">
                    <span class="text-muted">${moveNumber}.</span>
                    <span class="move-white">${whiteMove}</span>
                    <span class="move-black">${blackMove}</span>
                </div>
            `;
        }
        
        moveListElement.innerHTML = moveHtml;
    }
}

// Add navigation functionality if game is loaded
if (gameData) {
    document.addEventListener('DOMContentLoaded', function() {
        const prevBtn = document.getElementById('prevMoveBtn');
        const nextBtn = document.getElementById('nextMoveBtn');
        const resetBtn = document.getElementById('resetBtn');
        
        if (prevBtn) {
            prevBtn.addEventListener('click', function() {
                if (typeof chess !== 'undefined') {
                    chess.undo();
                    if (typeof board !== 'undefined') {
                        board.position(chess.fen());
                    }
                }
            });
        }
        
        if (nextBtn) {
            nextBtn.addEventListener('click', function() {
                // This would need to track move history to go forward
                // Implementation depends on your specific needs
            });
        }
        
        if (resetBtn) {
            resetBtn.addEventListener('click', function() {
                if (typeof chess !== 'undefined') {
                    chess.reset();
                    if (typeof board !== 'undefined') {
                        board.position(chess.fen());
                    }
                    updateMoveList();
                }
            });
        }
    });
}
</script>