@{
    ViewData["Title"] = "Chess Study";
}

<!-- Add this to your Study.cshtml temporarily for debugging -->
<!-- Add this to your Study.cshtml temporarily for debugging -->
<!-- Add this to your Study.cshtml temporarily for debugging -->

<script>
    // Debug script - add this to Study.cshtml temporarily
    console.log('🔍 Starting Chessground debug...');

    document.addEventListener('DOMContentLoaded', function() {
        console.log('📋 DOM loaded, checking elements...');

        // Check if board element exists
        const boardElement = document.getElementById('chessboard');
        console.log('🎯 Board element:', boardElement);
        console.log('📏 Board dimensions:', boardElement?.offsetWidth + 'x' + boardElement?.offsetHeight);

        // Check if CSS files loaded by testing a known class
        const testDiv = document.createElement('div');
        testDiv.className = 'cg-wrap';
        document.body.appendChild(testDiv);
        const styles = window.getComputedStyle(testDiv);
        console.log('🎨 CSS loaded check - cg-wrap position:', styles.position);
        document.body.removeChild(testDiv);

        // Check if Chessground is available
        setTimeout(() => {
            console.log('🔧 Chessground available:', typeof window.Chessground);
            console.log('🔧 chessgroundLoaded flag:', window.chessgroundLoaded);

            if (typeof window.Chessground === 'function') {
                console.log('✅ Chessground function is available');

                // Check what's inside the board element
                const boardContent = boardElement?.innerHTML;
                console.log('📝 Board innerHTML length:', boardContent?.length || 0);

                // Look for chessground elements
                const cgWrap = boardElement?.querySelector('.cg-wrap');
                const cgBoard = boardElement?.querySelector('.cg-board');
                const pieces = boardElement?.querySelectorAll('piece');

                console.log('🔍 Chessground DOM elements:');
                console.log('  - .cg-wrap found:', !!cgWrap);
                console.log('  - .cg-board found:', !!cgBoard);
                console.log('  - pieces found:', pieces?.length || 0);

                if (cgBoard) {
                    const boardStyles = window.getComputedStyle(cgBoard);
                    console.log('🎨 Board background:', boardStyles.backgroundImage);
                    console.log('🎨 Board size:', boardStyles.width, 'x', boardStyles.height);
                }

                if (pieces && pieces.length > 0) {
                    console.log('♔ First piece classes:', pieces[0].className);
                    const pieceStyles = window.getComputedStyle(pieces[0]);
                    console.log('♔ First piece background:', pieceStyles.backgroundImage);
                    console.log('♔ Piece has CSS background:', pieceStyles.backgroundImage !== 'none');

                    // If pieces have CSS backgrounds, hide Unicode fallbacks
                    if (pieceStyles.backgroundImage !== 'none') {
                        console.log('✅ CSS piece images detected, hiding Unicode fallbacks');
                        const style = document.createElement('style');
                        style.textContent = 'piece::before { display: none !important; }';
                        document.head.appendChild(style);
                    }
                }
            } else {
                console.log('❌ Chessground function not available');
            }
        }, 3000);
    });

    // Check network requests
    window.addEventListener('load', function() {
        console.log('🌐 Page fully loaded, checking for 404s...');

        // Test CSS file accessibility
        const cssFiles = [
            '/css/chessground/chessground.base.css',
            '/css/chessground/chessground.brown.css',
            '/css/chessground/chessground.cburnett.css'
        ];

        cssFiles.forEach(file => {
            fetch(file)
                .then(response => {
                    if (response.ok) {
                        console.log('✅ CSS file loaded:', file);
                        return response.text();
                    } else {
                        console.log('❌ CSS file failed:', file, response.status);
                    }
                })
                .then(text => {
                    if (text) {
                        console.log(`📄 ${file} size:`, text.length, 'characters');
                    }
                })
                .catch(error => {
                    console.log('❌ CSS file error:', file, error);
                });
        });

        // Test JS file
        fetch('/js/chessground/chessground.js')
            .then(response => {
                if (response.ok) {
                    console.log('✅ JS file loaded: /js/chessground/chessground.js');
                    return response.text();
                } else {
                    console.log('❌ JS file failed: /js/chessground/chessground.js', response.status);
                }
            })
            .then(text => {
                if (text) {
                    console.log('📄 chessground.js size:', text.length, 'characters');
                    console.log('📄 Contains export:', text.includes('export'));
                }
            })
            .catch(error => {
                console.log('❌ JS file error:', error);
            });
    });
</script>

<!-- Temporary fallback CSS for testing -->
<style>
    /* Temporary test - remove after debugging */
    #chessboard {
        border: 3px solid red !important;
        background: yellow !important;
    }

    /* Minimal chessboard CSS for testing */
    .cg-wrap {
        width: 100% !important;
        height: 100% !important;
        position: relative !important;
        display: block !important;
    }

    .cg-board {
        position: absolute !important;
        top: 0 !important;
        left: 0 !important;
        width: 100% !important;
        height: 100% !important;
        background: repeating-conic-gradient(#f0d9b5 0% 25%, #b58863 25% 50%) !important;
        background-size: 50px 50px !important;
    }

    piece {
        position: absolute !important;
        width: 12.5% !important;
        height: 12.5% !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        font-size: 2rem !important;
        z-index: 10 !important;
    }

        /* Unicode fallback pieces - will be hidden if CSS pieces load */
        piece.white.king::before {
            content: '♔' !important;
        }

        piece.white.queen::before {
            content: '♕' !important;
        }

        piece.white.rook::before {
            content: '♖' !important;
        }

        piece.white.bishop::before {
            content: '♗' !important;
        }

        piece.white.knight::before {
            content: '♘' !important;
        }

        piece.white.pawn::before {
            content: '♙' !important;
        }

        piece.black.king::before {
            content: '♚' !important;
        }

        piece.black.queen::before {
            content: '♛' !important;
        }

        piece.black.rook::before {
            content: '♜' !important;
        }

        piece.black.bishop::before {
            content: '♝' !important;
        }

        piece.black.knight::before {
            content: '♞' !important;
        }

        piece.black.pawn::before {
            content: '♟' !important;
        }
</style>


<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2><i class="fas fa-chess"></i> Chess Study Suite</h2>
            <p class="text-muted">Analyze positions, study games, and improve your chess with engine assistance.</p>
        </div>
    </div>

    <div class="chess-container">
        <!-- Chessboard Section -->
        <div class="chessboard-wrapper">
            <div id="chessboard"></div>
        </div>

        <!-- Control Panel -->
        <div class="chess-controls">
            <!-- Game Controls -->
            <div class="control-section">
                <h5><i class="fas fa-gamepad"></i> Game Controls</h5>
                <div class="d-flex flex-wrap gap-1">
                    <button class="btn-chess" onclick="resetBoard()" title="Reset to starting position">
                        <i class="fas fa-undo"></i> Reset
                    </button>
                    <button class="btn-chess" onclick="flipBoard()" title="Flip board orientation">
                        <i class="fas fa-sync-alt"></i> Flip
                    </button>
                    <button class="btn-chess" onclick="toggleAnalysis()" id="analysisToggle" title="Toggle engine analysis">
                        <i class="fas fa-brain"></i> Analysis: ON
                    </button>
                    <button class="btn-chess btn-secondary" onclick="copyFEN()" title="Copy current position FEN">
                        <i class="fas fa-copy"></i> Copy FEN
                    </button>
                    <button class="btn-chess btn-secondary" onclick="pasteFEN()" title="Paste FEN position">
                        <i class="fas fa-paste"></i> Paste FEN
                    </button>
                </div>
            </div>

            <!-- Engine Analysis -->
            <div class="control-section">
                <h5><i class="fas fa-robot"></i> Engine Analysis</h5>
                <div class="mb-3">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span><strong>Evaluation:</strong></span>
                        <span id="evaluation" class="badge bg-secondary">+0.00</span>
                    </div>
                    <div class="evaluation-bar">
                        <div class="evaluation-indicator" id="evalBar"></div>
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col-6">
                        <strong>Best Move:</strong>
                        <div id="best-move" class="text-primary">--</div>
                    </div>
                    <div class="col-6">
                        <strong>Depth:</strong>
                        <div id="depth" class="text-info">--</div>
                    </div>
                </div>

                <div class="mb-2">
                    <strong>Engine Status:</strong>
                    <span class="status-indicator status-disconnected" id="engineStatus"></span>
                    <span id="engineStatusText">Disconnected</span>
                </div>

                <div class="mb-2">
                    <strong>Principal Variation:</strong>
                    <div id="pv-line" class="small text-muted">--</div>
                </div>
            </div>

            <!-- Move History -->
            <div class="control-section">
                <h5><i class="fas fa-history"></i> Move History</h5>
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <span><strong>Moves:</strong> <span id="moveCount">0</span></span>
                    <div>
                        <button class="btn btn-sm btn-outline-secondary" onclick="goToPreviousMove()" title="Previous move">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" onclick="goToNextMove()" title="Next move">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" onclick="goToEnd()" title="Go to end">
                            <i class="fas fa-fast-forward"></i>
                        </button>
                    </div>
                </div>
                <div class="move-list" id="moves">
                    <div class="text-muted text-center">No moves yet</div>
                </div>
            </div>

            <!-- Position Information -->
            <div class="control-section">
                <h5><i class="fas fa-info-circle"></i> Position Info</h5>
                <div class="row">
                    <div class="col-6">
                        <strong>To Move:</strong>
                        <div id="toMove" class="text-primary">White</div>
                    </div>
                    <div class="col-6">
                        <strong>Material:</strong>
                        <div id="material" class="text-success">Equal</div>
                    </div>
                </div>
                <div class="mt-2">
                    <strong>Current FEN:</strong>
                    <div id="currentFEN" class="small text-muted font-monospace">
                        rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- FEN Input Modal -->
<div class="modal fade" id="fenModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Enter FEN Position</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="fenInput" class="form-label">FEN String:</label>
                    <textarea class="form-control font-monospace" id="fenInput" rows="3"
                              placeholder="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"></textarea>
                </div>
                <div class="text-muted small">
                    Enter a valid FEN string to set up a specific position.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="applyFEN()">Apply Position</button>
            </div>
        </div>
    </div>
</div>

<script src="~/js/chess-study.js"></script>