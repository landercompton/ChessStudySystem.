@{
    ViewData["Title"] = "Chess Study";
}

<div class="container-fluid">
    <div class="row g-3">
        <!-- Chessboard Section -->
        <div class="col-12 col-lg-6 col-xl-5">
            <div class="card h-100">
                <div class="card-body p-3">
                    <div class="chessboard-container">
                        <div id="chessboard" class="chessboard"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Controls Section -->
        <div class="col-12 col-lg-6 col-xl-7">
            <div class="chess-controls h-100">

                <!-- Engine Selection -->
                <div class="control-section">
                    <h5><i class="fas fa-robot"></i> Engine Selection</h5>
                    <div class="row g-2 mb-3">
                        <div class="col-8">
                            <select class="form-select" id="engineSelect">
                                <option value="">Choose Engine...</option>
                            </select>
                        </div>
                        <div class="col-4">
                            <button class="btn btn-outline-info w-100" onclick="showEngineInfo()" id="engineInfoBtn" disabled>
                                <i class="fas fa-info-circle"></i> Info
                            </button>
                        </div>
                    </div>

                    <div class="engine-status-card" id="engineStatusCard">
                        <div class="d-flex align-items-center">
                            <span class="status-indicator status-disconnected" id="engineStatus"></span>
                            <div class="flex-grow-1">
                                <div class="fw-bold" id="engineStatusText">No engine loaded</div>
                                <div class="small text-muted" id="engineSubtext">Select an engine to begin analysis</div>
                            </div>
                            <div class="engine-badge" id="engineBadge" style="display: none;"></div>
                        </div>
                    </div>
                </div>

                <!-- Game Controls -->
                <div class="control-section">
                    <h5><i class="fas fa-gamepad"></i> Game Controls</h5>
                    <div class="btn-group-vertical d-sm-none w-100" role="group">
                        <button type="button" class="btn btn-chess" onclick="resetBoard()">
                            <i class="fas fa-undo"></i> Reset
                        </button>
                        <button type="button" class="btn btn-chess" onclick="flipBoard()">
                            <i class="fas fa-sync-alt"></i> Flip
                        </button>
                        <button type="button" class="btn btn-chess" onclick="copyFEN()">
                            <i class="fas fa-copy"></i> Copy FEN
                        </button>
                        <button type="button" class="btn btn-chess" onclick="pasteFEN()">
                            <i class="fas fa-paste"></i> Paste FEN
                        </button>
                    </div>
                    <div class="btn-group d-none d-sm-flex flex-wrap" role="group">
                        <button type="button" class="btn btn-chess" onclick="resetBoard()">
                            <i class="fas fa-undo"></i> Reset
                        </button>
                        <button type="button" class="btn btn-chess" onclick="flipBoard()">
                            <i class="fas fa-sync-alt"></i> Flip
                        </button>
                        <button type="button" class="btn btn-chess" onclick="copyFEN()">
                            <i class="fas fa-copy"></i> Copy FEN
                        </button>
                        <button type="button" class="btn btn-chess" onclick="pasteFEN()">
                            <i class="fas fa-paste"></i> Paste FEN
                        </button>
                    </div>
                </div>

                <!-- Move Navigation -->
                <div class="control-section">
                    <h5><i class="fas fa-arrow-left"></i> Navigation</h5>
                    <div class="btn-group w-100 d-flex" role="group">
                        <button type="button" class="btn btn-secondary flex-fill" onclick="goToStart()">
                            <i class="fas fa-fast-backward"></i>
                        </button>
                        <button type="button" class="btn btn-secondary flex-fill" onclick="goToPreviousMove()">
                            <i class="fas fa-backward"></i>
                        </button>
                        <button type="button" class="btn btn-secondary flex-fill" onclick="goToNextMove()">
                            <i class="fas fa-forward"></i>
                        </button>
                        <button type="button" class="btn btn-secondary flex-fill" onclick="goToEnd()">
                            <i class="fas fa-fast-forward"></i>
                        </button>
                    </div>
                </div>

                <!-- Engine Analysis -->
                <div class="control-section">
                    <h5><i class="fas fa-brain"></i> Engine Analysis</h5>
                    <div class="row g-2 mb-3">
                        <div class="col-8">
                            <button type="button" class="btn btn-chess w-100" onclick="toggleAnalysis()" id="analysisToggle">
                                <i class="fas fa-play" id="analysisIcon"></i>
                                <span id="analysisText">Start Analysis</span>
                            </button>
                        </div>
                        <div class="col-4">
                            <button type="button" class="btn btn-outline-primary w-100" onclick="getEngineMove()" id="suggestMoveBtn" disabled>
                                <i class="fas fa-lightbulb"></i> Hint
                            </button>
                        </div>
                    </div>

                    <div class="analysis-results" id="analysisResults">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span><strong>Evaluation:</strong></span>
                            <span id="evaluation" class="badge bg-secondary">+0.00</span>
                        </div>

                        <div class="evaluation-bar mb-3">
                            <div class="evaluation-indicator" id="evalIndicator"></div>
                        </div>

                        <div class="row g-2 mb-2">
                            <div class="col-6">
                                <div class="analysis-stat">
                                    <div class="stat-label">Best Move</div>
                                    <div class="stat-value" id="best-move">--</div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="analysis-stat">
                                    <div class="stat-label">Depth</div>
                                    <div class="stat-value" id="depth">--</div>
                                </div>
                            </div>
                        </div>

                        <div class="row g-2 mb-2">
                            <div class="col-6">
                                <div class="analysis-stat">
                                    <div class="stat-label">Nodes</div>
                                    <div class="stat-value" id="nodes">--</div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="analysis-stat">
                                    <div class="stat-label">NPS</div>
                                    <div class="stat-value" id="nps">--</div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-2">
                            <div class="stat-label">Principal Variation</div>
                            <div class="stat-value small" id="pv-line">--</div>
                        </div>
                    </div>
                </div>

                <!-- Move History -->
                <div class="control-section">
                    <h5><i class="fas fa-history"></i> Move History</h5>
                    <div class="move-list" id="moveList">
                        <div class="text-muted">No moves yet</div>
                    </div>
                </div>

                <!-- Position Info -->
                <div class="control-section">
                    <h5><i class="fas fa-info-circle"></i> Position Info</h5>
                    <div class="small">
                        <div class="mb-2">
                            <strong>FEN:</strong><br>
                            <span id="currentFen" class="font-monospace text-break">rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1</span>
                        </div>
                        <div class="row">
                            <div class="col-6"><strong>Turn:</strong> <span id="currentTurn">White</span></div>
                            <div class="col-6"><strong>Move:</strong> <span id="currentMove">1</span></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Engine Info Modal -->
<div class="modal fade" id="engineInfoModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-robot"></i>
                    <span id="modalEngineTitle">Engine Information</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3" id="engineInfoContent">
                    <!-- Content populated by JavaScript -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="loadEngineFromModal" data-bs-dismiss="modal">
                    <i class="fas fa-download"></i> Load This Engine
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Engine Comparison Modal -->
<div class="modal fade" id="engineComparisonModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-balance-scale"></i>
                    Engine Comparison
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table table-hover" id="engineComparisonTable">
                        <thead>
                            <tr>
                                <th>Engine</th>
                                <th>Strength</th>
                                <th>Type</th>
                                <th>Size</th>
                                <th>Features</th>
                                <th>Load Time</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="engineComparisonBody">
                            <!-- Content populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Load chess study JavaScript and multi-engine system -->
    <script src="~/js/chess-study.js"></script>
    <script src="~/js/chess-engines.js"></script>

    <script>
        // Enhanced UI functions for multi-engine support

        function showEngineInfo() {
            const selectedEngine = document.getElementById('engineSelect').value;
            if (!selectedEngine) {
                showNotification('Please select an engine first', 'warning');
                return;
            }

            const engineInfo = engineManager.getEngineInfo(selectedEngine);
            displayEngineInfoModal(engineInfo);
        }

        function displayEngineInfoModal(engineInfo) {
            const modal = new bootstrap.Modal(document.getElementById('engineInfoModal'));

            document.getElementById('modalEngineTitle').textContent = engineInfo.name;

            const content = document.getElementById('engineInfoContent');
            content.innerHTML = `
                <div class="col-md-6">
                    <div class="engine-info-card" style="border-left: 4px solid ${engineInfo.color};">
                        <h6 class="fw-bold">${engineInfo.name}</h6>
                        <p class="text-muted mb-2">${engineInfo.description}</p>

                        <div class="mb-3">
                            <span class="badge" style="background-color: ${engineInfo.color};">
                                ${engineInfo.strength} Elo
                            </span>
                            <span class="badge bg-secondary ms-1">${engineInfo.type}</span>
                        </div>

                        <div class="row g-2 text-center">
                            <div class="col-4">
                                <div class="stat-box">
                                    <div class="stat-number">${engineInfo.size}</div>
                                    <div class="stat-label">Size</div>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="stat-box">
                                    <div class="stat-number">${engineInfo.loadTime}</div>
                                    <div class="stat-label">Load Time</div>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="stat-box">
                                    <div class="stat-number">${engineInfo.features.length}</div>
                                    <div class="stat-label">Features</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <h6>Features</h6>
                    <ul class="list-unstyled">
                        ${engineInfo.features.map(feature => `
                            <li><i class="fas fa-check text-success me-2"></i>${feature}</li>
                        `).join('')}
                    </ul>

                    <h6 class="mt-3">Technical Details</h6>
                    <table class="table table-sm">
                        <tr>
                            <td><strong>Creator:</strong></td>
                            <td>${engineInfo.creator}</td>
                        </tr>
                        <tr>
                            <td><strong>License:</strong></td>
                            <td>${engineInfo.license}</td>
                        </tr>
                        <tr>
                            <td><strong>WASM Files:</strong></td>
                            <td>${engineInfo.wasmFiles.join(', ')}</td>
                        </tr>
                    </table>

                    ${engineInfo.type === 'neural' ? `
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            This neural network engine may perform better on devices with GPU support.
                        </div>
                    ` : ''}

                    ${engineInfo.type === 'variant' ? `
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            This engine supports chess variants beyond standard chess.
                        </div>
                    ` : ''}
                </div>
            `;

            const loadButton = document.getElementById('loadEngineFromModal');
            loadButton.onclick = () => loadSelectedEngine(engineInfo.id);

            modal.show();
        }

        function showEngineComparison() {
            const modal = new bootstrap.Modal(document.getElementById('engineComparisonModal'));
            const engines = engineManager.getAvailableEngines();

            const tbody = document.getElementById('engineComparisonBody');
            tbody.innerHTML = engines.map(engine => `
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="engine-color-indicator me-2" style="background-color: ${engine.color}; width: 12px; height: 12px; border-radius: 50%;"></div>
                            <div>
                                <div class="fw-bold">${engine.name}</div>
                                <div class="small text-muted">${engine.creator}</div>
                            </div>
                        </div>
                    </td>
                    <td>
                        <span class="badge" style="background-color: ${engine.color};">
                            ${engine.strength} Elo
                        </span>
                    </td>
                    <td>
                        <span class="badge bg-secondary">${engine.type}</span>
                    </td>
                    <td>${engine.size}</td>
                    <td>
                        <div class="small">
                            ${engine.features.slice(0, 2).join(', ')}
                            ${engine.features.length > 2 ? '...' : ''}
                        </div>
                    </td>
                    <td>
                        <span class="badge ${engine.loadTime === 'Fast' ? 'bg-success' : engine.loadTime === 'Medium' ? 'bg-warning' : 'bg-danger'}">
                            ${engine.loadTime}
                        </span>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" onclick="loadSelectedEngine('${engine.id}')">
                            <i class="fas fa-download"></i> Load
                        </button>
                    </td>
                </tr>
            `).join('');

            modal.show();
        }

        async function loadSelectedEngine(engineId) {
            const select = document.getElementById('engineSelect');
            select.value = engineId;
            await handleEngineChange({ target: select });
        }

        async function getEngineMove() {
            if (!engineManager || !engineManager.currentEngine) {
                showNotification('No engine loaded', 'error');
                return;
            }

            try {
                const suggestBtn = document.getElementById('suggestMoveBtn');
                const originalText = suggestBtn.innerHTML;
                suggestBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Thinking...';
                suggestBtn.disabled = true;

                updateEngineStatus('analyzing', 'Getting best move...');

                const bestMove = await engineManager.getBestMove(currentFen, { timeMs: 2000 });

                if (bestMove && bestMove !== 'none') {
                    const from = bestMove.substring(0, 2);
                    const to = bestMove.substring(2, 4);

                    // Highlight the suggested move
                    board.setShapes([{
                        orig: from,
                        dest: to,
                        brush: 'blue'
                    }]);

                    const engineInfo = engineManager.getCurrentEngine().info;
                    showNotification(`${engineInfo.name} suggests: ${bestMove}`, 'info');
                } else {
                    showNotification('No move found', 'warning');
                }

                const engineInfo = engineManager.getCurrentEngine().info;
                updateEngineStatus('connected', `${engineInfo.name} Ready`);

            } catch (error) {
                console.error('Error getting engine move:', error);
                showNotification('Error getting engine move', 'error');
            } finally {
                const suggestBtn = document.getElementById('suggestMoveBtn');
                suggestBtn.innerHTML = '<i class="fas fa-lightbulb"></i> Hint';
                suggestBtn.disabled = false;
            }
        }

        // Enhanced engine status updates
        function updateEngineStatus(status, text, subtext = '') {
            const statusIndicator = document.getElementById('engineStatus');
            const statusText = document.getElementById('engineStatusText');
            const statusSubtext = document.getElementById('engineSubtext');
            const engineBadge = document.getElementById('engineBadge');
            const engineInfoBtn = document.getElementById('engineInfoBtn');
            const suggestMoveBtn = document.getElementById('suggestMoveBtn');

            if (statusIndicator) {
                statusIndicator.className = `status-indicator status-${status}`;
            }

            if (statusText) {
                statusText.textContent = text;
            }

            if (statusSubtext) {
                statusSubtext.textContent = subtext || '';
            }

            // Update engine badge
            if (engineManager && engineManager.currentEngine) {
                const engineInfo = engineManager.getCurrentEngine().info;
                if (engineBadge && engineInfo) {
                    engineBadge.style.display = 'block';
                    engineBadge.style.backgroundColor = engineInfo.color;
                    engineBadge.textContent = engineInfo.type.charAt(0).toUpperCase();
                    engineBadge.title = engineInfo.name;
                }

                // Enable buttons when engine is ready
                if (engineInfoBtn) engineInfoBtn.disabled = false;
                if (suggestMoveBtn) suggestMoveBtn.disabled = (status !== 'connected');
            } else {
                if (engineBadge) engineBadge.style.display = 'none';
                if (engineInfoBtn) engineInfoBtn.disabled = true;
                if (suggestMoveBtn) suggestMoveBtn.disabled = true;
            }
        }

        // Add comparison button to engine selection
        document.addEventListener('DOMContentLoaded', function() {
            // Add comparison button next to engine selector
            const engineSelectContainer = document.querySelector('#engineSelect').parentElement.parentElement;

            const comparisonBtn = document.createElement('div');
            comparisonBtn.className = 'col-12 mt-2';
            comparisonBtn.innerHTML = `
                <button class="btn btn-outline-secondary btn-sm w-100" onclick="showEngineComparison()">
                    <i class="fas fa-balance-scale"></i> Compare Engines
                </button>
            `;

            engineSelectContainer.appendChild(comparisonBtn);
        });

        // Override the original handleEngineChange function
        async function handleEngineChange(event) {
            const engineId = event.target.value;

            if (!engineId) {
                updateEngineStatus('no-engine', 'No engine loaded', 'Select an engine to begin analysis');
                return;
            }

            const engineInfo = engineManager.getEngineInfo(engineId);
            updateEngineStatus('loading', 'Loading engine...', `Initializing ${engineInfo.name}`);
            showNotification(`Loading ${engineInfo.name}...`, 'info');

            try {
                const result = await engineManager.loadEngine(engineId);

                if (result.success) {
                    updateEngineStatus('connected', `${result.engine.name} Ready`, `${result.engine.strength} Elo • ${result.engine.type} engine`);
                    showNotification(result.message, 'success');

                    // Start analysis if enabled
                    if (analysisEnabled) {
                        startEngineAnalysis();
                    }
                } else {
                    updateEngineStatus('error', 'Engine Load Failed', result.error);
                    showNotification(`Failed to load engine: ${result.error}`, 'error');
                }
            } catch (error) {
                updateEngineStatus('error', 'Engine Load Failed', error.message);
                showNotification(`Engine loading error: ${error.message}`, 'error');
            }
        }
    </script>
}