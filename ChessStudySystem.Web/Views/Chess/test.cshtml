<!DOCTYPE html>
<html>
<head>
    <title>Stockfish Engine Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }

        .test-section {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .status {
            padding: 5px 10px;
            border-radius: 3px;
            display: inline-block;
            margin: 5px 0;
        }

        .success {
            background: #d4edda;
            color: #155724;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
        }

        .info {
            background: #d1ecf1;
            color: #0c5460;
        }

        .log {
            background: #f5f5f5;
            padding: 10px;
            border-radius: 3px;
            font-family: monospace;
            font-size: 12px;
            max-height: 300px;
            overflow-y: auto;
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
    <h1>Stockfish Engine Test</h1>

    <div class="test-section">
        <h2>1. Check Stockfish Files</h2>
        <p>Checking for Stockfish files in /js/stockfish/...</p>
        <div id="file-check"></div>
    </div>

    <div class="test-section">
        <h2>2. Test Module Loading</h2>
        <button onclick="testModuleLoading()">Test Load Stockfish Module</button>
        <div id="module-test"></div>
    </div>

    <div class="test-section">
        <h2>3. Test Engine Manager</h2>
        <button onclick="testEngineManager()">Test Engine Manager</button>
        <div id="engine-test"></div>
    </div>

    <div class="test-section">
        <h2>Console Log</h2>
        <div id="console-log" class="log"></div>
    </div>

    <script>
        // Override console.log to display in page
        const originalLog = console.log;
        const logDiv = document.getElementById('console-log');

        console.log = function(...args) {
            originalLog.apply(console, args);
            logDiv.textContent += args.map(a =>
                typeof a === 'object' ? JSON.stringify(a, null, 2) : a
            ).join(' ') + '\n';
            logDiv.scrollTop = logDiv.scrollHeight;
        };

        // File paths to check
        const stockfishPaths = [
            '/js/stockfish/sf171-79.js',
            '/js/stockfish/sf16-7.js',
            '/js/stockfish/stockfish.js',
            '/js/stockfish/stockfish.wasm',
            '/js/stockfish/stockfish-nnue-16.js',
            '/js/stockfish/stockfish-nnue-16.wasm'
        ];

        // Check files on load
        window.onload = async function() {
            const fileCheckDiv = document.getElementById('file-check');

            for (const path of stockfishPaths) {
                try {
                    const response = await fetch(path, { method: 'HEAD' });
                    const status = response.ok ? 'success' : 'error';
                    const text = response.ok ? '✓ Found' : '✗ Not Found';
                    fileCheckDiv.innerHTML += `<div class="status ${status}">${path}: ${text}</div>`;
                } catch (err) {
                    fileCheckDiv.innerHTML += `<div class="status error">${path}: ✗ Error checking</div>`;
                }
            }
        };

        async function testModuleLoading() {
            const testDiv = document.getElementById('module-test');
            testDiv.innerHTML = '<div class="status info">Testing module loading...</div>';

            try {
                // Try to load the module
                const module = await import('/js/stockfish/sf171-79.js');
                console.log('Module loaded:', module);
                console.log('Module keys:', Object.keys(module));
                console.log('Module.default type:', typeof module.default);

                testDiv.innerHTML += '<div class="status success">✓ Module loaded successfully</div>';

                // Try to instantiate
                if (module.default) {
                    try {
                        const instance = typeof module.default === 'function'
                            ? module.default()
                            : module.default;
                        console.log('Instance created:', instance);
                        console.log('Instance type:', typeof instance);
                        console.log('Instance methods:', Object.keys(instance));

                        testDiv.innerHTML += '<div class="status success">✓ Instance created</div>';
                    } catch (err) {
                        console.log('Instance creation error:', err);
                        testDiv.innerHTML += '<div class="status error">✗ Failed to create instance: ' + err.message + '</div>';
                    }
                }
            } catch (err) {
                console.log('Module loading error:', err);
                testDiv.innerHTML += '<div class="status error">✗ Failed to load module: ' + err.message + '</div>';
            }
        }

        async function testEngineManager() {
            const testDiv = document.getElementById('engine-test');
            testDiv.innerHTML = '<div class="status info">Loading engine manager...</div>';

            try {
                // Load the engine manager script
                await loadScript('/js/chess-engines.js');
                testDiv.innerHTML += '<div class="status success">✓ Engine manager loaded</div>';

                if (window.chessEngineManager) {
                    testDiv.innerHTML += '<div class="status info">Initializing Lichess Stockfish...</div>';

                    try {
                        const engine = await window.chessEngineManager.loadEngine('lichess-stockfish');
                        testDiv.innerHTML += '<div class="status success">✓ Engine initialized successfully!</div>';

                        // Test sending a command
                        await engine.sendCommand('uci');
                        testDiv.innerHTML += '<div class="status success">✓ UCI command sent</div>';

                    } catch (err) {
                        console.log('Engine initialization error:', err);
                        testDiv.innerHTML += '<div class="status error">✗ Engine initialization failed: ' + err.message + '</div>';
                    }
                } else {
                    testDiv.innerHTML += '<div class="status error">✗ Engine manager not found on window</div>';
                }
            } catch (err) {
                console.log('Script loading error:', err);
                testDiv.innerHTML += '<div class="status error">✗ Failed to load engine manager: ' + err.message + '</div>';
            }
        }

        function loadScript(src) {
            return new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = src;
                script.onload = resolve;
                script.onerror = reject;
                document.head.appendChild(script);
            });
        }
    </script>
</body>
</html>